{{- if .Values.rollouts.enabled -}}
{{- $existingImageCredentials := .Values.secrets.existingImageCredentials -}}
{{- $imageCredentials := .Values.imageCredentials.name -}}
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: mgr-rollout
  annotations:
    checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
  {{- with .Values.annotations }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
    app: qtest-mgr
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.autoscaling.minReplicas.ui }}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: qtest-mgr
      release: {{ .Release.Name }}
  template:
    metadata:
      {{- if .Values.podAnnotations }}
      annotations:
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- end }}
      labels:
        app: qtest-mgr
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    spec:
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      {{- if .Values.secrets.existingImageCredentials -}}
      imagePullSecrets:
        - name: {{ $existingImageCredentials }}
      {{- else if .Values.imageCredentials.enabled -}}
      imagePullSecrets:
        - name: {{ $imageCredentials }}
      {{- end }}
      serviceAccountName: {{ template "qtest-chart.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automountsatoken }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        livenessProbe:
          httpGet:
            path: {{ .Values.autoscaling.healthApiPath }}
            port: {{ .Values.service.port }}
          periodSeconds: {{ .Values.autoscaling.periodSeconds }}
        readinessProbe:
          httpGet:
            path: {{ .Values.autoscaling.healthApiPath }}
            port: {{ .Values.service.port }}
          periodSeconds: {{ .Values.autoscaling.periodSeconds }}
        startupProbe:
          httpGet:
            path: {{ .Values.autoscaling.healthApiPath }}
            port: {{ .Values.service.port }}
          failureThreshold: {{ .Values.autoscaling.failureThreshold }}
          periodSeconds: {{ .Values.autoscaling.periodSeconds }}
        ports:
          - name: http
            containerPort: {{ .Values.service.port }}
            protocol: TCP
        envFrom:
          - configMapRef:
              name: qtest-manager-config
          - secretRef:
              name: qtest-manager-secret
        env:
        {{- if .Values.env }}
{{- toYaml .Values.env | nindent 11 }}
        {{- end }}
           - name: testconductor.environment
             value: "ui.production"
        volumeMounts:
        - name: qtest-data
          mountPath: /mnt/data/storage
      {{- if .Values.SigSci.enabled }}
      - name: sigsci-agent
        image: signalsciences/sigsci-agent:latest
        imagePullPolicy: Always
        resources:
          requests:
            memory: "0.5Gi"
            cpu: "0.5"
          limits:
            memory: "1Gi"
            cpu: "1"
        env:
        - name: SIGSCI_ACCESSKEYID
          valueFrom:
            secretKeyRef:
              name: sigsci-secret
              key: accesskeyid
        - name: SIGSCI_SECRETACCESSKEY
          valueFrom:
            secretKeyRef:
              name: sigsci-secret
              key: secretaccesskey
        # Configure the revproxy listener to listen on the original web application port 8000
        # forwarding to the app on the alternate port 8001 as the upstream
        - name: SIGSCI_REVPROXY_LISTENER
          value: "http:{listener='http://0.0.0.0:{{ .Values.service.targetSigSciPort }}',upstreams='http://127.0.0.1:{{ .Values.service.targetPort }}',access-log='/dev/stdout'}"
        ports:
        - containerPort: {{ .Values.service.targetSigSciPort }}
        securityContext:
          # The sigsci-agent container should run with its root filesystem read only
          readOnlyRootFilesystem: true
        volumeMounts:
        # Default volume mount location for sigsci-agent writeable data
        # NOTE: Also change `SIGSCI_SHARED_CACHE_DIR` (default `/sigsci/tmp/cache`)
        #       if mountPath is changed, but best not to change.
        - name: sigsci-tmp
          mountPath: /sigsci/tmp
      {{- end }}
      volumes:
      {{- if .Values.SigSci.enabled }}
        - name: sigsci-tmp
      {{- end }}
        - name: qtest-data
        {{- if .Values.persistence.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim }}
        {{- else if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ template "qtest-chart.fullname" . }}
        {{- else }}
          emptyDir: {}
        {{- end }}
  minReadySeconds: 30
  strategy:
    canary:
      maxSurge: "25%"
      maxUnavailable: 0
      canaryService: canary-mgr-service
      stableService: mgr-service
      trafficRouting:
        {{ .Values.ingress.ingressClassName }}:
          annotationPrefix: {{ .Values.ingress.canary.annotationPrefix }}
          {{- with .Values.ingress.canary.annotations }}
          additionalIngressAnnotations:
          {{- toYaml . | nindent 12 }}
          {{- end }}
          ingress: mgr-ingress
          servicePort: 443
      steps:
      - setWeight: 20
      {{- if .Values.metrics.enabled }}
      - analysis:
          templates:
          - templateName: success-rates
            clusterScope: true
          args:
          - name: service-name
      {{- end }}
      - setWeight: 50
      - pause: {}
---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: mgr-api-rollout
  annotations:
    checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
  {{- with .Values.annotations }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
    app: qtest-mgr-api
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.autoscaling.minReplicas.api }}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: qtest-mgr-api
      release: {{ .Release.Name }}
  template:
    metadata:
      {{- if .Values.podAnnotations }}
      annotations:
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- end }}
      labels:
        app: qtest-mgr-api
        release: {{ .Release.Name }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        heritage: "{{ .Release.Service }}"
    spec:
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      {{- if .Values.secrets.existingImageCredentials }}
      imagePullSecrets:
        - name: {{ $existingImageCredentials }}
      {{- else if .Values.imageCredentials.enabled }}
      imagePullSecrets:
        - name: {{ $imageCredentials }}
      {{- end }}
      serviceAccountName: {{ template "qtest-chart.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automountsatoken }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        livenessProbe:
          httpGet:
            path: {{ .Values.autoscaling.healthApiPath }}
            port: {{ .Values.service.port }}
          periodSeconds: {{ .Values.autoscaling.periodSeconds }}
        readinessProbe:
          httpGet:
            path: {{ .Values.autoscaling.healthApiPath }}
            port: {{ .Values.service.port }}
          periodSeconds: {{ .Values.autoscaling.periodSeconds }}
        startupProbe:
          httpGet:
            path: {{ .Values.autoscaling.healthApiPath }}
            port: {{ .Values.service.port }}
          failureThreshold: {{ .Values.autoscaling.failureThreshold }}
          periodSeconds: {{ .Values.autoscaling.periodSeconds }}
        ports:
          - name: http
            containerPort: {{ .Values.service.port }}
            protocol: TCP
        envFrom:
          - configMapRef:
              name: qtest-manager-config
          - secretRef:
              name: qtest-manager-secret
        env:
        {{- if .Values.env }}
{{- toYaml .Values.env | nindent 11 }}
        {{- end }}
           - name: testconductor.environment
             value: "api.production"
        volumeMounts:
        - name: qtest-data
          mountPath: /mnt/data/storage
      {{- if .Values.SigSci.enabled }}
      - name: sigsci-agent
        image: signalsciences/sigsci-agent:latest
        imagePullPolicy: Always
        resources:
          requests:
            memory: "0.5Gi"
            cpu: "0.5"
          limits:
            memory: "1Gi"
            cpu: "1"
        env:
        - name: SIGSCI_ACCESSKEYID
          valueFrom:
            secretKeyRef:
              name: sigsci-secret
              key: accesskeyid
        - name: SIGSCI_SECRETACCESSKEY
          valueFrom:
            secretKeyRef:
              name: sigsci-secret
              key: secretaccesskey
        # Configure the revproxy listener to listen on the original web application port 8000
        # forwarding to the app on the alternate port 8001 as the upstream
        - name: SIGSCI_REVPROXY_LISTENER
          value: "http:{listener='http://0.0.0.0:{{ .Values.service.targetSigSciPort }}',upstreams='http://127.0.0.1:{{ .Values.service.targetPort }}',access-log='/dev/stdout'}"
        ports:
        - containerPort: {{ .Values.service.targetSigSciPort }}
        securityContext:
          # The sigsci-agent container should run with its root filesystem read only
          readOnlyRootFilesystem: true
        volumeMounts:
        # Default volume mount location for sigsci-agent writeable data
        # NOTE: Also change `SIGSCI_SHARED_CACHE_DIR` (default `/sigsci/tmp/cache`)
        #       if mountPath is changed, but best not to change.
        - name: sigsci-tmp
          mountPath: /sigsci/tmp
      {{- end }}
      volumes:
      {{- if .Values.SigSci.enabled }}
        - name: sigsci-tmp
      {{- end }}
        - name: qtest-data
        {{- if .Values.persistence.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim }}
        {{- else if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ template "qtest-chart.fullname" . }}
        {{- else }}
          emptyDir: {}
        {{- end }}
  minReadySeconds: 30
  strategy:
    canary:
      maxSurge: "25%"
      maxUnavailable: 0
      canaryService: canary-mgr-service-api
      stableService: mgr-service-api
      trafficRouting:
        {{ .Values.ingress.ingressClassName }}:
          annotationPrefix: {{ .Values.ingress.canary.annotationPrefix }}
          {{- with .Values.ingress.canary.annotations }}
          additionalIngressAnnotations:
          {{- toYaml . | nindent 12 }}
          {{- end }}
          ingress: mgr-ingress
          servicePort: 443
      steps:
      - setWeight: 20
      {{- if .Values.metrics.enabled }}
      - analysis:
          templates:
          - templateName: success-rates
            clusterScope: true
          args:
          - name: service-name
      {{- end }}
      - setWeight: 50
      - pause: {}
---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: mgr-notification-rollout
  annotations:
    checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
  {{- with .Values.annotations }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
    app: qtest-mgr-notification
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.autoscaling.minReplicas.notification }}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: qtest-mgr-notification
      release: {{ .Release.Name }}
  template:
    metadata:
      {{- if .Values.podAnnotations }}
      annotations:
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- end }}
      labels:
        app: qtest-mgr-notification
        release: {{ .Release.Name }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        heritage: {{ .Release.Service }}
    spec:
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      {{- if .Values.secrets.existingImageCredentials }}
      imagePullSecrets:
        - name: {{ $existingImageCredentials }}
      {{- else if .Values.imageCredentials.enabled }}
      imagePullSecrets:
        - name: {{ $imageCredentials }}
      {{- end }}
      serviceAccountName: {{ template "qtest-chart.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automountsatoken }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        livenessProbe:
          httpGet:
            path: {{ .Values.autoscaling.healthApiPath }}
            port: {{ .Values.service.port }}
          periodSeconds: {{ .Values.autoscaling.periodSeconds }}
        readinessProbe:
          httpGet:
            path: {{ .Values.autoscaling.healthApiPath }}
            port: {{ .Values.service.port }}
          periodSeconds: {{ .Values.autoscaling.periodSeconds }}
        startupProbe:
          httpGet:
            path: {{ .Values.autoscaling.healthApiPath }}
            port: {{ .Values.service.port }}
          failureThreshold: {{ .Values.autoscaling.failureThreshold }}
          periodSeconds: {{ .Values.autoscaling.periodSeconds }}
        ports:
          - name: http
            containerPort: {{ .Values.service.port }}
            protocol: TCP
        envFrom:
          - configMapRef:
              name: qtest-manager-config
          - secretRef:
              name: qtest-manager-secret
        env:
        {{- if .Values.env }}
{{- toYaml .Values.env | nindent 11 }}
        {{- end }}
           - name: testconductor.environment
             value: "notification.production"
        volumeMounts:
        - name: qtest-data
          mountPath: /mnt/data/storage
      {{- if .Values.SigSci.enabled }}
      - name: sigsci-agent
        image: signalsciences/sigsci-agent:latest
        imagePullPolicy: Always
        resources:
          requests:
            memory: "0.5Gi"
            cpu: "0.5"
          limits:
            memory: "1Gi"
            cpu: "1"
        env:
        - name: SIGSCI_ACCESSKEYID
          valueFrom:
            secretKeyRef:
              name: sigsci-secret
              key: accesskeyid
        - name: SIGSCI_SECRETACCESSKEY
          valueFrom:
            secretKeyRef:
              name: sigsci-secret
              key: secretaccesskey
        # Configure the revproxy listener to listen on the original web application port 8000
        # forwarding to the app on the alternate port 8001 as the upstream
        - name: SIGSCI_REVPROXY_LISTENER
          value: "http:{listener='http://0.0.0.0:{{ .Values.service.targetSigSciPort }}',upstreams='http://127.0.0.1:{{ .Values.service.targetPort }}',access-log='/dev/stdout'}"
        ports:
        - containerPort: {{ .Values.service.targetSigSciPort }}
        securityContext:
          # The sigsci-agent container should run with its root filesystem read only
          readOnlyRootFilesystem: true
        volumeMounts:
        # Default volume mount location for sigsci-agent writeable data
        # NOTE: Also change `SIGSCI_SHARED_CACHE_DIR` (default `/sigsci/tmp/cache`)
        #       if mountPath is changed, but best not to change.
        - name: sigsci-tmp
          mountPath: /sigsci/tmp
      {{- end }}
      volumes:
      {{- if .Values.SigSci.enabled }}
        - name: sigsci-tmp
      {{- end }}
        - name: qtest-data
        {{- if .Values.persistence.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim }}
        {{- else if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ template "qtest-chart.fullname" . }}
        {{- else }}
          emptyDir: {}
        {{- end }}
  minReadySeconds: 30
  strategy:
    canary:
      maxSurge: "25%"
      maxUnavailable: 0
      canaryService: canary-mgr-service-notification
      stableService: mgr-service-notification
      trafficRouting:
        {{ .Values.ingress.ingressClassName }}:
          annotationPrefix: {{ .Values.ingress.canary.annotationPrefix }}
          {{- with .Values.ingress.canary.annotations }}
          additionalIngressAnnotations:
          {{- toYaml . | nindent 12 }}
          {{- end }}
          ingress: mgr-ingress
          servicePort: 443
      steps:
      - setWeight: 20
      {{- if .Values.metrics.enabled }}
      - analysis:
          templates:
          - templateName: success-rates
            clusterScope: true
          args:
          - name: service-name
      {{- end }}
      - setWeight: 50
      - pause: {}
---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: mgr-poller-rollout
  annotations:
    checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
  {{- with .Values.annotations }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
    app: qtest-mgr-poller
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.autoscaling.minReplicas.poller }}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: qtest-mgr-poller
      release: {{ .Release.Name }}
  template:
    metadata:
      {{- if .Values.podAnnotations }}
      annotations:
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- end }}
      labels:
        app: qtest-mgr-poller
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    spec:
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      {{- if .Values.secrets.existingImageCredentials }}
      imagePullSecrets:
      - name: {{ .Values.secrets.existingImageCredentials }}
      {{- else if .Values.imageCredentials.enabled }}
      imagePullSecrets:
      - name: {{ .Values.imageCredentials.name }}
      {{- end }}
      serviceAccountName: {{ template "qtest-chart.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automountsatoken }}
      containers:
      - image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        name: {{ .Chart.Name }}
        livenessProbe:
          httpGet:
            path: {{ .Values.autoscaling.healthApiPath }}
            port: {{ .Values.service.port }}
          periodSeconds: {{ .Values.autoscaling.periodSeconds }}
        readinessProbe:
          httpGet:
            path: {{ .Values.autoscaling.healthApiPath }}
            port: {{ .Values.service.port }}
          periodSeconds: {{ .Values.autoscaling.periodSeconds }}
        startupProbe:
          httpGet:
            path: {{ .Values.autoscaling.healthApiPath }}
            port: {{ .Values.service.port }}
          failureThreshold: {{ .Values.autoscaling.failureThreshold }}
          periodSeconds: {{ .Values.autoscaling.periodSeconds }}
        ports:
        - containerPort: {{ .Values.service.port }}
          name: http
          protocol: TCP
        env:
        {{- if .Values.env }}
{{- toYaml .Values.env | nindent 11 }}
        {{- end }}
           - name: testconductor.environment
             value: "poller.production"
        envFrom:
          - configMapRef:
              name: qtest-manager-config
          - secretRef:
              name: qtest-manager-secret
        volumeMounts:
        - name: qtest-data
          mountPath: /mnt/data/storage
      volumes:
      - name: qtest-data
      {{- if .Values.persistence.existingClaim }}
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaim }}
      {{- else if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ template "qtest-chart.fullname" . }}
      {{- else }}
        emptyDir: {}
      {{- end }}
  minReadySeconds: 30
  strategy:
    canary:
      maxSurge: "25%"
      maxUnavailable: 0
      steps:
      - setWeight: 20
      {{- if .Values.metrics.enabled }}
      - analysis:
          templates:
          - templateName: success-rates
            clusterScope: true
          args:
          - name: service-name
      {{- end }}
      - setWeight: 50
      - pause: {}
{{- end }}
